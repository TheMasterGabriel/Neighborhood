def colorize(text, color_code)
    "\e[#{color_code}m#{text}\e[0m"
end

MESSAGES = [
    "Cidney, how many times must I tell you not to park infront of the fire hydrant...",
    "Dylan, I hope you're not skipping school...",
    "Remember, trash cans should not block your driveways...",
    "Marshall, please do not leafblow between 5PM and 9AM..."
]

begin
    puts
    puts "[Neighborhood] #{MESSAGES.sample(1)[0]}"
    platforms = (`bundle platform`.gsub(/\s+|ruby/, '').split(/:|Your/)[4][2..-1] || "").split('*')
    
    if platforms.none?
        puts "  - Your Gemfile.lock does not contain any platform-specific gems.... Move along."
        exit!(0)
    end

    puts "  - Harboring some platform-specific gems (#{platforms.join(', ')})? I'll have to confiscate those...."

    platforms.each do |platform|
        `bundle lock --local --remove-platform=#{platform}`
    end

    puts "  - Successfully removed all platform specific gems.... Alright, move along."
    exit!(0)
rescue Exception => e
    print "\r" << (' ' * 50) << "\n"

    stacktrace = e.backtrace.map do |call|
        if (parts = call.match(/^(?<file>.+):(?<line>\d+):in `(?<code>.*)'$/))
            file = parts[:file].sub /^#{Regexp.escape(File.join(Dir.getwd, ''))}/, ''
            line = "#{colorize(file, 36)} #{colorize('(', 37)}#{colorize(parts[:line], 32)}#{colorize('): ', 37)} #{colorize(parts[:code], 31)}"
        else
            line = colorize(call, 31)
        end

        line
    end

    puts "An error occured during hall monitoring...:\n"
    stacktrace.each { |line| puts line }
    exit!(1)
end